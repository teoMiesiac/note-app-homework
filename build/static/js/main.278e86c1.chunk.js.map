{"version":3,"sources":["services/notes/notes.service.ts","services/notes/notes.constants.ts","store/store.tsx","store/notesStore.ts","layouts/MainLayout/MainLayout.styles.tsx","layouts/MainLayout/MainLayout.component.tsx","components/DateTimePicker/DateTimePicker.component.tsx","components/PasswordInput/PasswordInput.component.tsx","components/Icons/Copy/Copy.component.tsx","components/ShareNoteModal/ShareNoteModal.component.tsx","store/hooks.ts","components/NoteForm/NoteForm.component.tsx","pages/Landing/Landing.component.tsx","components/PasswordModal/PasswordModal.component.tsx","components/Note/Note.component.tsx","pages/Note/Note.component.tsx","styles/breakpoints.ts","styles/theme.ts","layouts/RootLayout/RootLayout.component.tsx","index.tsx"],"names":["NotesService","instance","axios","create","baseURL","postNote","note","a","post","getNote","id","password","store","NotesStore","notesService","loading","urlToShare","error","setNote","setLoading","setError","setUrlToShare","url","window","location","href","data","response","this","makeObservable","observable","action","StoreContext","createContext","DataStoreProvider","children","Provider","value","Main","styled","main","props","windowHeight","MainLayout","useState","height","setHeight","useLayoutEffect","calculateHeight","vh","innerHeight","addEventListener","removeEventListener","DateTimePicker","startDate","onChange","showTimeSelect","selected","dateFormat","timeFormat","required","minDate","calendarClassName","customInput","focusBorderColor","PasswordInput","inputProps","wrapperProps","show","setShow","placeholder","type","colorScheme","size","variant","onClick","View","Copy","viewBox","fill","d","ShareNoteModal","isOpen","onClose","toast","useToast","isCentered","color","isReadOnly","isTruncated","border","text","onCopy","title","duration","status","useDataStore","useContext","Error","NoteForm","observer","setText","Date","now","expireDate","setExpireDate","setPassword","isModalOpen","setIsModalOpen","useEffect","as","direction","width","maxWidth","padding","borderRadius","boxShadow","onSubmit","event","preventDefault","trim","expirationTime","toJSON","isRequired","currentTarget","date","mt","minLength","marginTop","disabled","isLoading","Landing","alignItems","justifyContent","sm","md","PasswordModal","useParams","length","Note","wrap","textAlign","display","breakpoints","createBreakpoints","lg","xl","xxl","theme","extendTheme","RootLayout","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.278e86c1.chunk.js","sourcesContent":["import axios from 'axios'\nimport { Note } from 'models'\nimport { URL, PostNoteResponse, GetNoteResponse } from './notes.constants'\n\nexport class NotesService {\n  instance = axios.create({ baseURL: URL })\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  postNote = async (note: Note): Promise<PostNoteResponse> => await this.instance.post('', note)\n  getNote = async (id: string, password: string): Promise<GetNoteResponse> => await this.instance.post(id, { password })\n}\n","export const URL = 'https://europe-central2-note-app-314122.cloudfunctions.net/note'\n\ninterface PostNoteData {\n  id: string\n}\nexport interface PostNoteResponse {\n  data: PostNoteData\n}\n\ninterface GetNoteData {\n  text: string\n}\nexport interface GetNoteResponse {\n  data: GetNoteData\n}\n","import React, { createContext } from 'react'\nimport { NotesStore } from './notesStore'\n\nexport interface IStore {\n  NotesStore: NotesStore\n}\n\nexport const store: IStore = {\n  NotesStore: new NotesStore(),\n}\n\nexport const StoreContext = createContext(store)\n\ninterface Props {\n  children: React.ReactNode\n}\n\nexport const DataStoreProvider = ({ children }: Props): JSX.Element => {\n  return <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\n}\n","import { action, makeObservable, observable } from 'mobx'\nimport { Note } from 'models'\nimport { NotesService } from 'services'\n\nclass NotesStore {\n  notesService: NotesService\n  note: Note | null = null\n  loading = false\n  urlToShare: string | null = null\n  error: null | string = null\n\n  constructor() {\n    this.notesService = new NotesService()\n\n    makeObservable(this, {\n      note: observable,\n      loading: observable,\n      urlToShare: observable,\n      setNote: action,\n      setLoading: action,\n      setUrlToShare: action,\n      setError: action,\n      postNote: action,\n    })\n  }\n\n  setNote = (note: Note | null): void => {\n    this.note = note\n  }\n\n  setLoading = (loading: boolean): void => {\n    this.loading = loading\n  }\n\n  setError = (error: string | null): void => {\n    this.error = error\n  }\n\n  setUrlToShare = (url: string | null): void => {\n    url ? (this.urlToShare = window.location.href + 'note/' + url) : (this.urlToShare = null)\n  }\n\n  postNote = async (note: Note): Promise<void> => {\n    this.setUrlToShare(null)\n    this.setLoading(true)\n    try {\n      const { data } = await this.notesService.postNote(note)\n      this.setUrlToShare(data.id)\n    } catch (e) {\n      if (e.response && e.response.data) this.setError(e.response.data.error)\n    }\n    this.setLoading(false)\n  }\n\n  getNote = async (id: string, password: string): Promise<void> => {\n    this.setError(null)\n    this.setLoading(true)\n    try {\n      const { data } = await this.notesService.getNote(id, password)\n      this.setNote(data as Note)\n    } catch (e) {\n      if (e.response && e.response.data) this.setError(e.response.data.error)\n    }\n    this.setLoading(false)\n  }\n}\n\nexport { NotesStore }\n","import styled from '@emotion/styled'\n\ninterface MainProps {\n  windowHeight: number\n}\n\nexport const Main = styled.main<MainProps>`\n  //height: 100vh;\n  height: ${(props) => props.windowHeight}px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n","import { useState, useLayoutEffect } from 'react'\nimport { Main } from './MainLayout.styles'\n\ninterface Props {\n  children: React.ReactNode\n}\n\nconst MainLayout = ({ children }: Props): JSX.Element => {\n  const [height, setHeight] = useState<number>(0)\n\n  // make container 100vh on mobile\n  // https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\n  useLayoutEffect(() => {\n    const calculateHeight = async () => {\n      const vh = window.innerHeight\n      setHeight(vh)\n    }\n    calculateHeight()\n    window.addEventListener('resize', calculateHeight)\n    return () => window.removeEventListener('resize', calculateHeight)\n  }, [])\n\n  return <Main windowHeight={height}>{children}</Main>\n}\n\nexport default MainLayout\n","import DatePicker from 'react-datepicker'\nimport { Input } from '@chakra-ui/react'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './DateTimePicker.styles.css'\n\ninterface Props {\n  startDate: Date\n  onChange: (date: Date) => void\n}\n\nconst DateTimePicker = ({ startDate, onChange }: Props): JSX.Element => (\n  <DatePicker\n    showTimeSelect\n    selected={startDate}\n    onChange={onChange}\n    dateFormat=\"d MMMM, yyyy h:mm aa\"\n    timeFormat=\"HH:mm\"\n    required={true}\n    minDate={startDate}\n    id=\"expireDate\"\n    calendarClassName=\"customCalendar\"\n    customInput={<Input required focusBorderColor=\"teal.500\" id=\"expireDate\" />}\n  />\n)\n\nexport default DateTimePicker\n","import { useState } from 'react'\nimport { Input, InputGroup, InputProps, InputRightElement, InputGroupProps, Button } from '@chakra-ui/react'\nimport { ViewIcon } from '@chakra-ui/icons'\n\ninterface Props {\n  value: string\n  inputProps?: InputProps\n  wrapperProps?: InputGroupProps\n}\n\nconst PasswordInput = ({ value, inputProps = {}, wrapperProps = {} }: Props): JSX.Element => {\n  const [show, setShow] = useState<boolean>(false)\n  const handleClick = () => setShow(!show)\n\n  return (\n    <InputGroup {...wrapperProps}>\n      <Input\n        focusBorderColor=\"teal.500\"\n        placeholder=\"Password\"\n        value={value}\n        type={show ? 'text' : 'password'}\n        {...inputProps}\n      />\n      <InputRightElement>\n        <Button colorScheme=\"teal\" size=\"sm\" variant=\"ghost\" onClick={handleClick}>\n          <ViewIcon />\n        </Button>\n      </InputRightElement>\n    </InputGroup>\n  )\n}\n\nexport default PasswordInput\n","import { Icon, IconProps } from '@chakra-ui/react'\n\ninterface Props {\n  props?: IconProps\n}\n\nconst Copy = ({ props }: Props): JSX.Element => (\n  <Icon viewBox=\"0 0 24 24\" {...props}>\n    <path\n      fill=\"currentColor\"\n      d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"\n    />\n  </Icon>\n)\n\nexport default Copy\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Input,\n  InputGroup,\n  InputRightElement,\n  Button,\n  useToast,\n} from '@chakra-ui/react'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport { Copy } from 'components/Icons'\n\ninterface Props {\n  isOpen: boolean\n  onClose: () => void\n  url: string | null\n}\n\nconst ShareNoteModal = ({ isOpen, onClose, url }: Props): JSX.Element => {\n  const toast = useToast()\n\n  const onClick = (): void => {\n    toast({\n      title: 'URL copied to clipboard',\n      duration: 2000,\n      status: 'success',\n    })\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} isCentered={true}>\n      <ModalOverlay />\n      <ModalContent color=\"teal.500\">\n        <ModalHeader>Share Note</ModalHeader>\n        <ModalBody>\n          <InputGroup>\n            <Input\n              value={url || ''}\n              size=\"md\"\n              isReadOnly\n              focusBorderColor=\"teal.500\"\n              isTruncated={true}\n              border=\"2px\"\n            ></Input>\n            <InputRightElement>\n              <CopyToClipboard text={url || ''} onCopy={onClick}>\n                <Button colorScheme=\"teal\" size=\"sm\" variant=\"ghost\">\n                  <Copy />\n                </Button>\n              </CopyToClipboard>\n            </InputRightElement>\n          </InputGroup>\n        </ModalBody>\n        <ModalFooter />\n      </ModalContent>\n    </Modal>\n  )\n}\n\nexport default ShareNoteModal\n","import { useContext } from 'react'\nimport { StoreContext } from './store'\nimport { IStore } from './store'\n\nexport const useDataStore = (): IStore => {\n  const store = useContext(StoreContext)\n  if (!store) {\n    throw new Error('useStore must be used within a StoreProvider.')\n  }\n  return store\n}\n","import { useState, useEffect, FormEvent, SyntheticEvent } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport { Flex, FormControl, FormLabel, Textarea, Button } from '@chakra-ui/react'\nimport { DateTimePicker } from 'components/DateTimePicker'\nimport { PasswordInput } from 'components/PasswordInput'\nimport { ShareNoteModal } from 'components/ShareNoteModal'\nimport { useDataStore } from 'store/hooks'\n\nconst NoteForm = observer((): JSX.Element => {\n  const [text, setText] = useState<string>('')\n  const [expireDate, setExpireDate] = useState<Date>(new Date(Date.now() + 3600 * 1000 * 24)) // Add one day in ms\n  const [password, setPassword] = useState<string>('')\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false)\n  const {\n    NotesStore: { postNote, loading, urlToShare },\n  } = useDataStore()\n\n  useEffect(() => {\n    urlToShare !== null && setIsModalOpen(true)\n  }, [urlToShare])\n\n  const onTextChange = (event: FormEvent<HTMLTextAreaElement>): void => {\n    setText(event.currentTarget.value)\n  }\n\n  const onPasswordChange = (event: FormEvent<HTMLInputElement>): void => {\n    setPassword(event.currentTarget.value)\n  }\n\n  const isAnyFieldEmpty = (): boolean => {\n    return text === '' || password === '' || expireDate === null\n  }\n\n  const onSubmit = (event: SyntheticEvent): void => {\n    event.preventDefault()\n    postNote({ text: text.trim(), expirationTime: expireDate.toJSON(), password })\n  }\n\n  const onModalClose = (): void => {\n    setText('')\n    setPassword('')\n    setExpireDate(new Date(Date.now() + 3600 * 1000 * 24))\n    setIsModalOpen(false)\n  }\n\n  return (\n    <>\n      <Flex\n        as=\"form\"\n        direction=\"column\"\n        width=\"100%\"\n        maxWidth=\"450px\"\n        padding={5}\n        borderRadius=\"10px\"\n        boxShadow=\"2xl\"\n        color=\"teal.500\"\n        onSubmit={onSubmit}\n      >\n        <FormControl id=\"noteContent\" isRequired>\n          <FormLabel>Note Content</FormLabel>\n          <Textarea\n            focusBorderColor=\"teal.500\"\n            value={text}\n            onChange={onTextChange}\n            placeholder=\"What's on your mind?\"\n            required={true}\n          />\n        </FormControl>\n        <FormControl id=\"expireDate\">\n          <FormLabel>Expire date:</FormLabel>\n          <DateTimePicker startDate={expireDate} onChange={(date) => setExpireDate(date)} />\n        </FormControl>\n        <FormControl id=\"password\" isRequired mt={3}>\n          <FormLabel>Protect your note</FormLabel>\n          <PasswordInput\n            value={password}\n            inputProps={{\n              onChange: onPasswordChange,\n              isRequired: true,\n              placeholder: 'Password',\n              minLength: 5,\n            }}\n            wrapperProps={{ marginTop: 2 }}\n          />\n        </FormControl>\n        <Button type=\"submit\" colorScheme=\"teal\" disabled={isAnyFieldEmpty()} mt={3} isLoading={loading}>\n          Share\n        </Button>\n      </Flex>\n      <ShareNoteModal isOpen={isModalOpen} url={urlToShare} onClose={onModalClose} />\n    </>\n  )\n})\n\nexport default NoteForm\n","import { Flex } from '@chakra-ui/react'\nimport { MainLayout } from 'layouts/MainLayout'\nimport { NoteForm } from 'components/NoteForm'\n\nconst Landing = (): JSX.Element => (\n  <MainLayout>\n    <Flex\n      as=\"section\"\n      direction=\"column\"\n      height=\"100%\"\n      width=\"100%\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      padding={{ sm: 5, md: 10 }}\n      maxWidth=\"1440px\"\n    >\n      <NoteForm />\n    </Flex>\n  </MainLayout>\n)\n\nexport default Landing\n","import { useState, FormEvent, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  useToast,\n} from '@chakra-ui/react'\nimport { observer } from 'mobx-react-lite'\nimport { PasswordInput } from 'components/PasswordInput'\nimport { useDataStore } from 'store/hooks'\n\nconst PasswordModal = observer((): JSX.Element => {\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(true)\n  const [password, setPassword] = useState<string>('')\n  const { id } = useParams<{ id: string }>()\n  const {\n    NotesStore: { getNote, loading, error, note },\n  } = useDataStore()\n  const toast = useToast()\n\n  useEffect(() => {\n    if (error) {\n      toast({\n        title: error,\n        duration: 2000,\n        status: 'error',\n      })\n    }\n  }, [error, toast])\n\n  useEffect(() => {\n    note && setIsModalOpen(false)\n  }, [note])\n\n  const onPasswordChange = (event: FormEvent<HTMLInputElement>): void => {\n    setPassword(event.currentTarget.value)\n  }\n\n  const isSubmitDisabled = (): boolean => password.length === 0\n\n  return (\n    <Modal isOpen={isModalOpen} onClose={() => null} isCentered={true}>\n      <ModalOverlay />\n      <ModalContent color=\"teal.500\">\n        <ModalHeader>Someone shared note with you!</ModalHeader>\n        <ModalBody>\n          <PasswordInput\n            value={password}\n            inputProps={{\n              onChange: onPasswordChange,\n              isRequired: true,\n              placeholder: 'Password',\n            }}\n          />\n        </ModalBody>\n        <ModalFooter justifyContent=\"flex-start\">\n          <Button\n            colorScheme=\"teal\"\n            width=\"150px\"\n            onClick={() => getNote(id, password)}\n            isLoading={loading}\n            disabled={isSubmitDisabled()}\n          >\n            View\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  )\n})\n\nexport default PasswordModal\n","import { Heading, Text, Flex, Spacer } from '@chakra-ui/react'\nimport { Note as INote } from 'models'\n\ninterface Props {\n  note: INote\n}\n\nconst Note = ({ note }: Props): JSX.Element => (\n  <>\n    <Flex\n      direction=\"column\"\n      width=\"100%\"\n      maxWidth=\"450px\"\n      padding={5}\n      borderRadius=\"10px\"\n      boxShadow=\"2xl\"\n      color=\"teal.500\"\n    >\n      <Flex direction=\"column\" width=\"100%\" wrap=\"nowrap\" alignItems=\"flex-start\">\n        <Heading as=\"h3\" color=\"teal.500\" textAlign=\"left\">\n          Note:\n        </Heading>\n        <Text color=\"teal.500\" width=\"100%\" display=\"inline-block\" padding={2}>\n          {note.text}\n        </Text>\n        <Spacer />\n      </Flex>\n    </Flex>\n  </>\n)\n\nexport default Note\n","import { Flex } from '@chakra-ui/react'\nimport { observer } from 'mobx-react-lite'\nimport { PasswordModal } from 'components/PasswordModal'\nimport { useDataStore } from 'store/hooks'\nimport { Note as NoteComponent } from 'components/Note'\nimport { MainLayout } from 'layouts/MainLayout'\n\nconst Note = observer((): JSX.Element => {\n  const {\n    NotesStore: { note },\n  } = useDataStore()\n\n  return (\n    <MainLayout>\n      <Flex\n        as=\"section\"\n        direction=\"column\"\n        height=\"100%\"\n        width=\"100%\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        padding={{ sm: 5, md: 10 }}\n        maxWidth=\"1440px\"\n      >\n        {note && <NoteComponent note={note} />}\n      </Flex>\n      <PasswordModal />\n    </MainLayout>\n  )\n})\n\nexport default Note\n","import { createBreakpoints } from '@chakra-ui/theme-tools'\n\n// How to use:\n// margin={{base: 5,sm:6,md:7,lg:8,xl:9,xxl:10}}\n\nexport const breakpoints = createBreakpoints({\n  sm: '320px',\n  md: '768px',\n  lg: '1280px',\n  xl: '1440px',\n  xxl: '1920px',\n})\n","import { extendTheme } from '@chakra-ui/react'\nimport { breakpoints } from './breakpoints'\n\nexport const theme = extendTheme({ breakpoints })\n","import { ChakraProvider } from '@chakra-ui/react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { DataStoreProvider } from 'store/store'\nimport { Landing } from 'pages/Landing'\nimport { Note } from 'pages/Note'\nimport { theme } from 'styles/theme'\n\n// Chakra automatically includes <CSSReset />, by default set to true\n\nconst RootLayout = (): JSX.Element => {\n  return (\n    <ChakraProvider theme={theme}>\n      <DataStoreProvider>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\">\n              <Landing />\n            </Route>\n            <Route path=\"/note/:id\">\n              <Note />\n            </Route>\n          </Switch>\n        </Router>\n      </DataStoreProvider>\n    </ChakraProvider>\n  )\n}\n\nexport default RootLayout\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { RootLayout } from 'layouts/RootLayout'\n\nReactDOM.render(\n  <React.StrictMode>\n    <RootLayout />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}